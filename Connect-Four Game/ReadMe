Introduction:
Mazes are a fun past-time, and can help people develop problem solving skills. 
In computer science mazes are used as a way to solve optimization problems. 
This is a program to find the quickest way out of a maze. 

User Commands:
1. Read maze from keyboard is used to read a maze from the keyboard. Following the guidelines for representation listed above, your program should start by entering the width and height, and then read the maze in one line at a time. Your solution should validate that the maze that is entered into the keyboard is the correct width and height.

2. Read maze from file is used to read a maze from a file. The maze contained should follow the same guidelines for representation listed above except this time the contents will be contained in a file. This option should prompt the user for a file name and read the maze in from that file.

3. Find exit requires the program to calculate the quickest way out of the maze. The user should be prompted for a location in the maze (in other words, they should input a coordinate that says the x and y location) to start that does not coincide with a wall and then display the length of the quickest way out along with the maze showing the path. You can choose to have your minimum x and y be 0 or 1, and you can choose which corner of your maze should be the origin (either 0,0 or 1,1). This choice will likely be made based upon the type of data structure you are using. 
To show the path out, use:

"S" (capital letter S) to denotes the starting point for the player.
"*" (asterisk) to denotes part of a path out.
For example, consider the following output that shows the fastest way to the exit:

XXXXXXXXXXXXX
X           X
X           X
X     S**** X
X  XXXXXXX* X
X     ***** X
XXXXXXEXXXXXX

4. Print maze would print the current maze to the screen. It should print the way to the exit if it has been calculated.

5. Quit game is used to exit the program. Your program should not exit unless this option is selected.
